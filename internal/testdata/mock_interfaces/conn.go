// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/devjs-takelook/booking/internal/server/interfaces (interfaces: IConn)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	io "io"
	net "net"
	reflect "reflect"
	time "time"
)

// MockIConn is a mock of IConn interface
type MockIConn struct {
	ctrl     *gomock.Controller
	recorder *MockIConnMockRecorder
}

// MockIConnMockRecorder is the mock recorder for MockIConn
type MockIConnMockRecorder struct {
	mock *MockIConn
}

// NewMockIConn creates a new mock instance
func NewMockIConn(ctrl *gomock.Controller) *MockIConn {
	mock := &MockIConn{ctrl: ctrl}
	mock.recorder = &MockIConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConn) EXPECT() *MockIConnMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConn)(nil).Close))
}

// CloseHandler mocks base method
func (m *MockIConn) CloseHandler() func(int, string) error {
	ret := m.ctrl.Call(m, "CloseHandler")
	ret0, _ := ret[0].(func(int, string) error)
	return ret0
}

// CloseHandler indicates an expected call of CloseHandler
func (mr *MockIConnMockRecorder) CloseHandler() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseHandler", reflect.TypeOf((*MockIConn)(nil).CloseHandler))
}

// EnableWriteCompression mocks base method
func (m *MockIConn) EnableWriteCompression(arg0 bool) {
	m.ctrl.Call(m, "EnableWriteCompression", arg0)
}

// EnableWriteCompression indicates an expected call of EnableWriteCompression
func (mr *MockIConnMockRecorder) EnableWriteCompression(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWriteCompression", reflect.TypeOf((*MockIConn)(nil).EnableWriteCompression), arg0)
}

// LocalAddr mocks base method
func (m *MockIConn) LocalAddr() net.Addr {
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr
func (mr *MockIConnMockRecorder) LocalAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockIConn)(nil).LocalAddr))
}

// NextReader mocks base method
func (m *MockIConn) NextReader() (int, io.Reader, error) {
	ret := m.ctrl.Call(m, "NextReader")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(io.Reader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NextReader indicates an expected call of NextReader
func (mr *MockIConnMockRecorder) NextReader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextReader", reflect.TypeOf((*MockIConn)(nil).NextReader))
}

// NextWriter mocks base method
func (m *MockIConn) NextWriter(arg0 int) (io.WriteCloser, error) {
	ret := m.ctrl.Call(m, "NextWriter", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextWriter indicates an expected call of NextWriter
func (mr *MockIConnMockRecorder) NextWriter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextWriter", reflect.TypeOf((*MockIConn)(nil).NextWriter), arg0)
}

// PingHandler mocks base method
func (m *MockIConn) PingHandler() func(string) error {
	ret := m.ctrl.Call(m, "PingHandler")
	ret0, _ := ret[0].(func(string) error)
	return ret0
}

// PingHandler indicates an expected call of PingHandler
func (mr *MockIConnMockRecorder) PingHandler() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingHandler", reflect.TypeOf((*MockIConn)(nil).PingHandler))
}

// PongHandler mocks base method
func (m *MockIConn) PongHandler() func(string) error {
	ret := m.ctrl.Call(m, "PongHandler")
	ret0, _ := ret[0].(func(string) error)
	return ret0
}

// PongHandler indicates an expected call of PongHandler
func (mr *MockIConnMockRecorder) PongHandler() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PongHandler", reflect.TypeOf((*MockIConn)(nil).PongHandler))
}

// ReadJSON mocks base method
func (m *MockIConn) ReadJSON(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "ReadJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON
func (mr *MockIConnMockRecorder) ReadJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockIConn)(nil).ReadJSON), arg0)
}

// ReadMessage mocks base method
func (m *MockIConn) ReadMessage() (int, []byte, error) {
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *MockIConnMockRecorder) ReadMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockIConn)(nil).ReadMessage))
}

// RemoteAddr mocks base method
func (m *MockIConn) RemoteAddr() net.Addr {
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockIConnMockRecorder) RemoteAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockIConn)(nil).RemoteAddr))
}

// SetCloseHandler mocks base method
func (m *MockIConn) SetCloseHandler(arg0 func(int, string) error) {
	m.ctrl.Call(m, "SetCloseHandler", arg0)
}

// SetCloseHandler indicates an expected call of SetCloseHandler
func (mr *MockIConnMockRecorder) SetCloseHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloseHandler", reflect.TypeOf((*MockIConn)(nil).SetCloseHandler), arg0)
}

// SetCompressionLevel mocks base method
func (m *MockIConn) SetCompressionLevel(arg0 int) error {
	ret := m.ctrl.Call(m, "SetCompressionLevel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCompressionLevel indicates an expected call of SetCompressionLevel
func (mr *MockIConnMockRecorder) SetCompressionLevel(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCompressionLevel", reflect.TypeOf((*MockIConn)(nil).SetCompressionLevel), arg0)
}

// SetPingHandler mocks base method
func (m *MockIConn) SetPingHandler(arg0 func(string) error) {
	m.ctrl.Call(m, "SetPingHandler", arg0)
}

// SetPingHandler indicates an expected call of SetPingHandler
func (mr *MockIConnMockRecorder) SetPingHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPingHandler", reflect.TypeOf((*MockIConn)(nil).SetPingHandler), arg0)
}

// SetPongHandler mocks base method
func (m *MockIConn) SetPongHandler(arg0 func(string) error) {
	m.ctrl.Call(m, "SetPongHandler", arg0)
}

// SetPongHandler indicates an expected call of SetPongHandler
func (mr *MockIConnMockRecorder) SetPongHandler(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPongHandler", reflect.TypeOf((*MockIConn)(nil).SetPongHandler), arg0)
}

// SetReadDeadline mocks base method
func (m *MockIConn) SetReadDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *MockIConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockIConn)(nil).SetReadDeadline), arg0)
}

// SetReadLimit mocks base method
func (m *MockIConn) SetReadLimit(arg0 int64) {
	m.ctrl.Call(m, "SetReadLimit", arg0)
}

// SetReadLimit indicates an expected call of SetReadLimit
func (mr *MockIConnMockRecorder) SetReadLimit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadLimit", reflect.TypeOf((*MockIConn)(nil).SetReadLimit), arg0)
}

// SetWriteDeadline mocks base method
func (m *MockIConn) SetWriteDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (mr *MockIConnMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockIConn)(nil).SetWriteDeadline), arg0)
}

// Subprotocol mocks base method
func (m *MockIConn) Subprotocol() string {
	ret := m.ctrl.Call(m, "Subprotocol")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subprotocol indicates an expected call of Subprotocol
func (mr *MockIConnMockRecorder) Subprotocol() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subprotocol", reflect.TypeOf((*MockIConn)(nil).Subprotocol))
}

// UnderlyingConn mocks base method
func (m *MockIConn) UnderlyingConn() net.Conn {
	ret := m.ctrl.Call(m, "UnderlyingConn")
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// UnderlyingConn indicates an expected call of UnderlyingConn
func (mr *MockIConnMockRecorder) UnderlyingConn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnderlyingConn", reflect.TypeOf((*MockIConn)(nil).UnderlyingConn))
}

// WriteControl mocks base method
func (m *MockIConn) WriteControl(arg0 int, arg1 []byte, arg2 time.Time) error {
	ret := m.ctrl.Call(m, "WriteControl", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl
func (mr *MockIConnMockRecorder) WriteControl(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*MockIConn)(nil).WriteControl), arg0, arg1, arg2)
}

// WriteJSON mocks base method
func (m *MockIConn) WriteJSON(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "WriteJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON
func (mr *MockIConnMockRecorder) WriteJSON(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*MockIConn)(nil).WriteJSON), arg0)
}

// WriteMessage mocks base method
func (m *MockIConn) WriteMessage(arg0 int, arg1 []byte) error {
	ret := m.ctrl.Call(m, "WriteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockIConnMockRecorder) WriteMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockIConn)(nil).WriteMessage), arg0, arg1)
}

// WritePreparedMessage mocks base method
func (m *MockIConn) WritePreparedMessage(arg0 *websocket.PreparedMessage) error {
	ret := m.ctrl.Call(m, "WritePreparedMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePreparedMessage indicates an expected call of WritePreparedMessage
func (mr *MockIConnMockRecorder) WritePreparedMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePreparedMessage", reflect.TypeOf((*MockIConn)(nil).WritePreparedMessage), arg0)
}
