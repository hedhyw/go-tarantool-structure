// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/devjs-takelook/booking/internal/db/interfaces (interfaces: IConnection)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_tarantool "github.com/tarantool/go-tarantool"
)

// MockIConnection is a mock of IConnection interface
type MockIConnection struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionMockRecorder
}

// MockIConnectionMockRecorder is the mock recorder for MockIConnection
type MockIConnectionMockRecorder struct {
	mock *MockIConnection
}

// NewMockIConnection creates a new mock instance
func NewMockIConnection(ctrl *gomock.Controller) *MockIConnection {
	mock := &MockIConnection{ctrl: ctrl}
	mock.recorder = &MockIConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m MockIConnection) EXPECT() *MockIConnectionMockRecorder {
	return m.recorder
}

// Call mocks base method
func (m MockIConnection) Call(arg0 string, arg1 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockIConnectionMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIConnection)(nil).Call), arg0, arg1)
}

// Call17 mocks base method
func (m MockIConnection) Call17(arg0 string, arg1 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Call17", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call17 indicates an expected call of Call17
func (mr *MockIConnectionMockRecorder) Call17(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17", reflect.TypeOf((*MockIConnection)(nil).Call17), arg0, arg1)
}

// Call17Async mocks base method
func (m MockIConnection) Call17Async(arg0 string, arg1 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "Call17Async", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// Call17Async indicates an expected call of Call17Async
func (mr *MockIConnectionMockRecorder) Call17Async(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17Async", reflect.TypeOf((*MockIConnection)(nil).Call17Async), arg0, arg1)
}

// Call17Typed mocks base method
func (m MockIConnection) Call17Typed(arg0 string, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "Call17Typed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call17Typed indicates an expected call of Call17Typed
func (mr *MockIConnectionMockRecorder) Call17Typed(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call17Typed", reflect.TypeOf((*MockIConnection)(nil).Call17Typed), arg0, arg1, arg2)
}

// CallAsync mocks base method
func (m MockIConnection) CallAsync(arg0 string, arg1 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "CallAsync", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// CallAsync indicates an expected call of CallAsync
func (mr *MockIConnectionMockRecorder) CallAsync(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallAsync", reflect.TypeOf((*MockIConnection)(nil).CallAsync), arg0, arg1)
}

// CallTyped mocks base method
func (m MockIConnection) CallTyped(arg0 string, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "CallTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallTyped indicates an expected call of CallTyped
func (mr *MockIConnectionMockRecorder) CallTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTyped", reflect.TypeOf((*MockIConnection)(nil).CallTyped), arg0, arg1, arg2)
}

// Delete mocks base method
func (m MockIConnection) Delete(arg0, arg1, arg2 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockIConnectionMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIConnection)(nil).Delete), arg0, arg1, arg2)
}

// DeleteAsync mocks base method
func (m MockIConnection) DeleteAsync(arg0, arg1, arg2 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "DeleteAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// DeleteAsync indicates an expected call of DeleteAsync
func (mr *MockIConnectionMockRecorder) DeleteAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsync", reflect.TypeOf((*MockIConnection)(nil).DeleteAsync), arg0, arg1, arg2)
}

// DeleteTyped mocks base method
func (m MockIConnection) DeleteTyped(arg0, arg1, arg2, arg3 interface{}) error {
	ret := m.ctrl.Call(m, "DeleteTyped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTyped indicates an expected call of DeleteTyped
func (mr *MockIConnectionMockRecorder) DeleteTyped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTyped", reflect.TypeOf((*MockIConnection)(nil).DeleteTyped), arg0, arg1, arg2, arg3)
}

// Eval mocks base method
func (m MockIConnection) Eval(arg0 string, arg1 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Eval", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eval indicates an expected call of Eval
func (mr *MockIConnectionMockRecorder) Eval(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockIConnection)(nil).Eval), arg0, arg1)
}

// EvalAsync mocks base method
func (m MockIConnection) EvalAsync(arg0 string, arg1 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "EvalAsync", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// EvalAsync indicates an expected call of EvalAsync
func (mr *MockIConnectionMockRecorder) EvalAsync(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalAsync", reflect.TypeOf((*MockIConnection)(nil).EvalAsync), arg0, arg1)
}

// EvalTyped mocks base method
func (m MockIConnection) EvalTyped(arg0 string, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "EvalTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EvalTyped indicates an expected call of EvalTyped
func (mr *MockIConnectionMockRecorder) EvalTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalTyped", reflect.TypeOf((*MockIConnection)(nil).EvalTyped), arg0, arg1, arg2)
}

// GetTyped mocks base method
func (m MockIConnection) GetTyped(arg0, arg1, arg2, arg3 interface{}) error {
	ret := m.ctrl.Call(m, "GetTyped", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTyped indicates an expected call of GetTyped
func (mr *MockIConnectionMockRecorder) GetTyped(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTyped", reflect.TypeOf((*MockIConnection)(nil).GetTyped), arg0, arg1, arg2, arg3)
}

// Insert mocks base method
func (m *MockIConnection) Insert(arg0, arg1 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockIConnectionMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIConnection)(nil).Insert), arg0, arg1)
}

// InsertAsync mocks base method
func (m MockIConnection) InsertAsync(arg0, arg1 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "InsertAsync", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// InsertAsync indicates an expected call of InsertAsync
func (mr *MockIConnectionMockRecorder) InsertAsync(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAsync", reflect.TypeOf((*MockIConnection)(nil).InsertAsync), arg0, arg1)
}

// InsertTyped mocks base method
func (m MockIConnection) InsertTyped(arg0, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "InsertTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTyped indicates an expected call of InsertTyped
func (mr *MockIConnectionMockRecorder) InsertTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTyped", reflect.TypeOf((*MockIConnection)(nil).InsertTyped), arg0, arg1, arg2)
}

// Ping mocks base method
func (m MockIConnection) Ping() (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockIConnectionMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIConnection)(nil).Ping))
}

// Replace mocks base method
func (m *MockIConnection) Replace(arg0, arg1 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace
func (mr *MockIConnectionMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockIConnection)(nil).Replace), arg0, arg1)
}

// ReplaceAsync mocks base method
func (m MockIConnection) ReplaceAsync(arg0, arg1 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "ReplaceAsync", arg0, arg1)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// ReplaceAsync indicates an expected call of ReplaceAsync
func (mr *MockIConnectionMockRecorder) ReplaceAsync(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAsync", reflect.TypeOf((*MockIConnection)(nil).ReplaceAsync), arg0, arg1)
}

// ReplaceTyped mocks base method
func (m MockIConnection) ReplaceTyped(arg0, arg1, arg2 interface{}) error {
	ret := m.ctrl.Call(m, "ReplaceTyped", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceTyped indicates an expected call of ReplaceTyped
func (mr *MockIConnectionMockRecorder) ReplaceTyped(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTyped", reflect.TypeOf((*MockIConnection)(nil).ReplaceTyped), arg0, arg1, arg2)
}

// Select mocks base method
func (m *MockIConnection) Select(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Select", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockIConnectionMockRecorder) Select(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockIConnection)(nil).Select), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SelectAsync mocks base method
func (m MockIConnection) SelectAsync(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "SelectAsync", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// SelectAsync indicates an expected call of SelectAsync
func (mr *MockIConnectionMockRecorder) SelectAsync(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAsync", reflect.TypeOf((*MockIConnection)(nil).SelectAsync), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SelectTyped mocks base method
func (m MockIConnection) SelectTyped(arg0, arg1 interface{}, arg2, arg3, arg4 uint32, arg5, arg6 interface{}) error {
	ret := m.ctrl.Call(m, "SelectTyped", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectTyped indicates an expected call of SelectTyped
func (mr *MockIConnectionMockRecorder) SelectTyped(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTyped", reflect.TypeOf((*MockIConnection)(nil).SelectTyped), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Update mocks base method
func (m MockIConnection) Update(arg0, arg1, arg2, arg3 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockIConnectionMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIConnection)(nil).Update), arg0, arg1, arg2, arg3)
}

// UpdateAsync mocks base method
func (m MockIConnection) UpdateAsync(arg0, arg1, arg2, arg3 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "UpdateAsync", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// UpdateAsync indicates an expected call of UpdateAsync
func (mr *MockIConnectionMockRecorder) UpdateAsync(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsync", reflect.TypeOf((*MockIConnection)(nil).UpdateAsync), arg0, arg1, arg2, arg3)
}

// UpdateTyped mocks base method
func (m MockIConnection) UpdateTyped(arg0, arg1, arg2, arg3, arg4 interface{}) error {
	ret := m.ctrl.Call(m, "UpdateTyped", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTyped indicates an expected call of UpdateTyped
func (mr *MockIConnectionMockRecorder) UpdateTyped(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTyped", reflect.TypeOf((*MockIConnection)(nil).UpdateTyped), arg0, arg1, arg2, arg3, arg4)
}

// Upsert mocks base method
func (m MockIConnection) Upsert(arg0, arg1, arg2 interface{}) (*go_tarantool.Response, error) {
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_tarantool.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert
func (mr *MockIConnectionMockRecorder) Upsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockIConnection)(nil).Upsert), arg0, arg1, arg2)
}

// UpsertAsync mocks base method
func (m MockIConnection) UpsertAsync(arg0, arg1, arg2 interface{}) *go_tarantool.Future {
	ret := m.ctrl.Call(m, "UpsertAsync", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_tarantool.Future)
	return ret0
}

// UpsertAsync indicates an expected call of UpsertAsync
func (mr *MockIConnectionMockRecorder) UpsertAsync(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAsync", reflect.TypeOf((*MockIConnection)(nil).UpsertAsync), arg0, arg1, arg2)
}
